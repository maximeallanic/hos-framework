worker_processes auto;
#worker_rlimit_nofile 100000;
#daemon off;
user web web;


env DOMAIN;
env DEV;

events {
	#worker_connections 524288;
	worker_connections 19000;
	use epoll;
	multi_accept on;
}

http {

	#open_file_cache max=200000 inactive=20s;
	#open_file_cache_valid 30s;
	#open_file_cache_min_uses 2;
	#open_file_cache_errors on;
	#reset_timedout_connection on;
	#send_timeout 2;

	##
	# Security
	##
	#limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
	#limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=500r/s;
	#client_body_buffer_size  128k;

	# headerbuffer size for the request header from client, its set for testing purpose
	#client_header_buffer_size 3m;

	# maximum number and size of buffers for large headers to read from client request
	#large_client_header_buffers 4 256k;

	# read timeout for the request body from client, its set for testing purpose
	#client_body_timeout   3m;

	# how long to wait for the client to send a request header, its set for testing purpose
	#client_header_timeout 3m;
##
# Basic Settings
##


	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;


	include /usr/local/openresty/nginx/conf/mime.types;
	default_type application/octet-stream;

##
# Gzip Settings
##

	gzip                on;
	gzip_disable        "MSIE [1-6]\.(?!.*SV1)";
	gzip_http_version   1.0;
	gzip_vary           on;
	gzip_comp_level     6;
    gzip_min_length     1000;
    gzip_proxied        any;
    gzip_buffers        16 8k;

# Compress all output labeled with one of the following MIME-types.
	gzip_types
		application/atom+xml
		application/javascript
		application/json
		application/rss+xml
		application/vnd.ms-fontobject
		application/x-font-ttf
		application/x-web-app-manifest+json
		application/xhtml+xml
		application/xml
		font/opentype
		image/svg+xml
		image/x-icon
		text/css
		text/plain
		text/x-component;

##
# Virtual Host Configs
##

	##
	# Lua SSL
	##
	lua_shared_dict auto_ssl 1m;

    # A DNS resolver must be defined for OSCP stapling to function.
    resolver 8.8.8.8;

    # Initial setup tasks.
    init_by_lua_block {
        auto_ssl = (require "resty.auto-ssl").new()

        -- Define a function to determine which SNI domains to automatically handle
        -- and register new certificates for. Defaults to not allowing any domains,
        -- so this must be configured.
        auto_ssl:set("allow_domain", function(domain)
            return true
        end)

        auto_ssl:init()
    }

    init_worker_by_lua_block {
        auto_ssl:init_worker()
    }

    server {
		listen 443 default_server ssl fastopen=300 so_keepalive=30m::10;
		listen [::]:443 default_server ssl fastopen=300 so_keepalive=30m::10;

		listen 80;
        listen [::]:80;

        set_by_lua $domain 'return os.getenv("DOMAIN")';
        set_by_lua $is_dev 'return os.getenv("DEV")';

        client_max_body_size 1G;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        # ssl_session_tickets on;
        # ssl_session_ticket_key /var/www/app/ssl/session.key;
        # ssl_dhparam /var/www/app/ssl/dhparam.pem;
        # ssl_stapling on;
        keepalive_timeout 100s;
        # spdy_headers_comp 0;

        ssl_certificate_by_lua_block {
            auto_ssl:ssl_certificate()
        }

        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;


        if ($is_dev = 0) {
            set $log "off";
            set $log_error off;
            set $log_access off;
        }
        if ($is_dev = 1) {
            set $log "on";
        	set $log_access /var/www/app/log/nginx/access.log;
        	set $log_error /var/www/app/log/nginx/error.log;
        }

        log_subrequest on;
        error_log $log_access;
        access_log $log_error;


		charset		utf-8;
		root        /var/www/;

		## Security Header ##
		server_tokens off;
		##

		## Cors ##
		add_header 'Access-Control-Allow-Credentials' 'true';
		add_header 'Access-Control-Allow-Origin' https://$domain;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With';
		add_header 'Strict-Transport-Security' 'max-age=31536000; includeSubdomains';
    	add_header 'Content-Security-Policy' "default-src https: 'unsafe-inline' 'unsafe-eval';";
        add_header 'X-Frame-Options' 'SAMEORIGIN';
        add_header 'X-XSS-Protection' '1; mode=block';
        add_header 'X-Content-Type-Options' 'nosniff';
        add_header 'X-UA-Compatible' 'IE=Edge,chrome=1';

        location /.well-known/acme-challenge/ {
            if ($scheme = http) {
                content_by_lua_block {
                    auto_ssl:challenge_server()
                }
            }
        }

        location / {
            if ($scheme = http) {
                return 301 https://$domain$request_uri;
            }
			try_files   /vendor/hos/hos-framework/bin/router.php =404;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index router.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_buffers 256 16k;
            fastcgi_buffer_size 128k;
            fastcgi_send_timeout 120s;
            fastcgi_read_timeout 120s;
            fastcgi_busy_buffers_size 256k;
            fastcgi_temp_file_write_size 256k;
            reset_timedout_connection on;
            fastcgi_intercept_errors off;
            fastcgi_keep_conn on;
            fastcgi_connect_timeout 130s;
            include /usr/local/openresty/nginx/conf/fastcgi_params;

        }
    }

    # Internal server running on port 8999 for handling certificate tasks.
    server {
        listen 127.0.0.1:8999;
        location / {
            content_by_lua_block {
                auto_ssl:hook_server()
            }
        }
    }
}
